// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movie.sql

package db

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, description, poster_url, genre_id)
VALUES ($1, $2, $3, $4)
RETURNING movie_id, title, description, poster_url, genre_id, created_at
`

type CreateMovieParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	PosterUrl   string `json:"poster_url"`
	GenreID     int32  `json:"genre_id"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.Description,
		arg.PosterUrl,
		arg.GenreID,
	)
	var i Movie
	err := row.Scan(
		&i.MovieID,
		&i.Title,
		&i.Description,
		&i.PosterUrl,
		&i.GenreID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE movie_id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, movieID int32) error {
	_, err := q.db.Exec(ctx, deleteMovie, movieID)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT movie_id, title, description, poster_url, genre_id, created_at FROM movies
WHERE movie_id = $1
`

func (q *Queries) GetMovie(ctx context.Context, movieID int32) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, movieID)
	var i Movie
	err := row.Scan(
		&i.MovieID,
		&i.Title,
		&i.Description,
		&i.PosterUrl,
		&i.GenreID,
		&i.CreatedAt,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT movie_id, title, description, poster_url, genre_id, created_at FROM movies
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListMoviesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.MovieID,
			&i.Title,
			&i.Description,
			&i.PosterUrl,
			&i.GenreID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title = $2,
    description = $3,
    poster_url = $4,
    genre_id = $5
WHERE movie_id = $1
RETURNING movie_id, title, description, poster_url, genre_id, created_at
`

type UpdateMovieParams struct {
	MovieID     int32  `json:"movie_id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	PosterUrl   string `json:"poster_url"`
	GenreID     int32  `json:"genre_id"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.MovieID,
		arg.Title,
		arg.Description,
		arg.PosterUrl,
		arg.GenreID,
	)
	var i Movie
	err := row.Scan(
		&i.MovieID,
		&i.Title,
		&i.Description,
		&i.PosterUrl,
		&i.GenreID,
		&i.CreatedAt,
	)
	return i, err
}
